# hermetic_proxy_toolchain.cmake.in / tipi technologies Ltd / 2024
#
# Proxy toolchain for Hermetic FetchContent dependencies
# 
# Template Parameters:
# - HERMETIC_FETCHCONTENT_ROOT_DIR                                :: path to Hermetic_FetchContent
# - HERMETIC_FETCHCONTENT_CMAKE_TOOLCHAIN_FILE                    :: full path to cmake toolchain file used 
# - HERMETIC_FETCHCONTENT_TOOLCHAIN_EXTENSION                     :: additional build args passed by the user as plain CMake instructions
# - HERMETIC_FETCHCONTENT_FIND_PACKAGES                           :: list of Hermetic FetchContent packages this project depends upon 
# - HERMETIC_FETCHCONTENT_PROJECT_DEPENDENCIES_CONTENTS           :: CMake variable declarations for dependency properties show beneath
# - HERMETIC_FETCHCONTENT_BYPASS_PROVIDER_FOR_PACKAGES            :: List of packages for which the find_package() requests can be forwarded to the native implementation
# - HERMETIC_FETCHCONTENT_GOLDILOCKS_INSTALL_DIR                
#

# Hermetic_FetchContent modules
list(APPEND CMAKE_MODULE_PATH "@HERMETIC_FETCHCONTENT_ROOT_DIR@")
list(APPEND CMAKE_MODULE_PATH "@HERMETIC_FETCHCONTENT_ROOT_DIR@/modules")

# 
macro(set_or_clear_if_empty var value)
  set(${var} "${value}")
  if(${var} STREQUAL "")
    unset(${var} CACHE)
  endif()
endmacro()

# 
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_ROOT_PROJECT_SOURCE_DIR "@HERMETIC_FETCHCONTENT_ROOT_PROJECT_SOURCE_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_ROOT_PROJECT_BINARY_DIR "@HERMETIC_FETCHCONTENT_ROOT_PROJECT_BINARY_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_TOOLS_DIR "@HERMETIC_FETCHCONTENT_TOOLS_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_SOURCE_CACHE_DIR "@HERMETIC_FETCHCONTENT_SOURCE_CACHE_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_INSTALL_DIR "@HERMETIC_FETCHCONTENT_INSTALL_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_GENERATE_SUMMARY_FILE ON)
set_or_clear_if_empty(FETCHCONTENT_BASE_DIR "@FETCHCONTENT_BASE_DIR@")


# Hermetic FetchContent contents made available in the parent build so far
include(hfc_targets_cache_alias)
@HFC_AVAILABLE_CONTENTS_CODE@

# goldilock path and check thats was verify in the parent project
set(HERMETIC_FETCHCONTENT_TOOLCHAIN_IS_PROXY_TOOLCHAIN TRUE)
set(HERMETIC_FETCHCONTENT_goldilock_BIN "@HERMETIC_FETCHCONTENT_goldilock_BIN@")

include(hfc_initialize)
hfc_initialize("@HERMETIC_FETCHCONTENT_ROOT_DIR@")

# register the hfc_dependency_provider as additional include to the project's toplevel CMakeLists.txt
# this way it gets loaded before the first call to project() 
set(HERMETIC_FETCHCONTENT_BYPASS_PROVIDER_FOR_PACKAGES "@HERMETIC_FETCHCONTENT_BYPASS_PROVIDER_FOR_PACKAGES@")

set(hfc_dependency_provider_module "@HERMETIC_FETCHCONTENT_ROOT_DIR@/modules/hfc_dependency_provider.cmake")
if(NOT hfc_dependency_provider_module IN_LIST CMAKE_PROJECT_TOP_LEVEL_INCLUDES)
  list(APPEND CMAKE_PROJECT_TOP_LEVEL_INCLUDES "${hfc_dependency_provider_module}")
endif()

# cmake variables that are forwarded from the parent project
# to set a baseline for things that might not be provided through 
# the project toolchain. Defined before including the toolchain because
# the toolchain should utilmately be the source of information and
# might have behavior overriding values passed here
@HERMETIC_FETCHCONTENT_FORWARDED_CMAKE_VARIABLES_CONTENT@

# use the CMake toolchain that the user wants
if(NOT "@HERMETIC_FETCHCONTENT_CMAKE_TOOLCHAIN_FILE@" STREQUAL "")
  include("@HERMETIC_FETCHCONTENT_CMAKE_TOOLCHAIN_FILE@")
endif()

# Hermetic FetchContent Package declarations for the dependencies
@HERMETIC_FETCHCONTENT_PROJECT_DEPENDENCIES_CONTENTS@


# additional build args
@HERMETIC_FETCHCONTENT_TOOLCHAIN_EXTENSION@

#
# 
set(HFC_SUMMARY_FILE_destination "@HFC_SUMMARY_FILE@" CACHE INTERNAL "Write summary file to")
set(HFC_SUMMARY_FILE_contentName "@HFC_SUMMARY_CONTENT_NAME@" CACHE INTERNAL "Content name of this dependency in the summary file")

# end of file