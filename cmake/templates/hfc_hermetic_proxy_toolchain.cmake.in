# hermetic_proxy_toolchain.cmake.in / tipi technologies Ltd / 2024
#
# Proxy toolchain for Hermetic FetchContent dependencies
# 
# Template Parameters:
# - HERMETIC_FETCHCONTENT_ROOT_DIR                                :: path to Hermetic_FetchContent
# - HERMETIC_FETCHCONTENT_CMAKE_TOOLCHAIN_FILE                    :: full path to cmake toolchain file used 
# - HERMETIC_FETCHCONTENT_TOOLCHAIN_EXTENSION                     :: additional build args passed by the user as plain CMake instructions
# - HERMETIC_FETCHCONTENT_FIND_PACKAGES                           :: list of Hermetic FetchContent packages this project depends upon 
# - HERMETIC_FETCHCONTENT_PROJECT_DEPENDENCIES_CONTENTS           :: CMake variable declarations for dependency properties show beneath
# - HERMETIC_FETCHCONTENT_BYPASS_PROVIDER_FOR_PACKAGES            :: List of packages for which the find_package() requests can be forwarded to the native implementation
# - HERMETIC_FETCHCONTENT_GOLDILOCKS_INSTALL_DIR                
#

# Hermetic_FetchContent modules
list(APPEND CMAKE_MODULE_PATH "@HERMETIC_FETCHCONTENT_ROOT_DIR@")
list(APPEND CMAKE_MODULE_PATH "@HERMETIC_FETCHCONTENT_ROOT_DIR@/modules")

# 
macro(set_or_clear_if_empty var value)
  set(${var} "${value}")
  if(${var} STREQUAL "")
    unset(${var} CACHE)
  endif()
endmacro()

# 
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_ROOT_PROJECT_SOURCE_DIR "@HERMETIC_FETCHCONTENT_ROOT_PROJECT_SOURCE_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_ROOT_PROJECT_BINARY_DIR "@HERMETIC_FETCHCONTENT_ROOT_PROJECT_BINARY_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_TOOLS_DIR "@HERMETIC_FETCHCONTENT_TOOLS_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_SOURCE_CACHE_DIR "@HERMETIC_FETCHCONTENT_SOURCE_CACHE_DIR@")
set_or_clear_if_empty(HERMETIC_FETCHCONTENT_INSTALL_DIR "@HERMETIC_FETCHCONTENT_INSTALL_DIR@")
set_or_clear_if_empty(FETCHCONTENT_BASE_DIR "@FETCHCONTENT_BASE_DIR@")

# Hermetic FetchContent contents made available in the parent build so far
include(hfc_targets_cache_alias)
@HFC_AVAILABLE_CONTENTS_CODE@

# goldilock path and check thats was verify in the parent project
set(HERMETIC_FETCHCONTENT_TOOLCHAIN_IS_PROXY_TOOLCHAIN TRUE)
set(HERMETIC_FETCHCONTENT_goldilock_BIN "@HERMETIC_FETCHCONTENT_goldilock_BIN@")

include(hfc_initialize)
hfc_initialize("@HERMETIC_FETCHCONTENT_ROOT_DIR@")

# register the hfc_dependency_provider as additional include to the project's toplevel CMakeLists.txt
# this way it gets loaded before the first call to project() 
set(HERMETIC_FETCHCONTENT_BYPASS_PROVIDER_FOR_PACKAGES "@HERMETIC_FETCHCONTENT_BYPASS_PROVIDER_FOR_PACKAGES@")

set(hfc_dependency_provider_module "@HERMETIC_FETCHCONTENT_ROOT_DIR@/modules/hfc_dependency_provider.cmake")
if(NOT hfc_dependency_provider_module IN_LIST CMAKE_PROJECT_TOP_LEVEL_INCLUDES)
  list(APPEND CMAKE_PROJECT_TOP_LEVEL_INCLUDES "${hfc_dependency_provider_module}")
endif()

# cmake variables that are forwarded from the parent project
# to set a baseline for things that might not be provided through 
# the project toolchain. Defined before including the toolchain because
# the toolchain should utilmately be the source of information and
# might have behavior overriding values passed here
@HERMETIC_FETCHCONTENT_FORWARDED_CMAKE_VARIABLES_CONTENT@

# use the CMake toolchain that the user wants
if(NOT "@HERMETIC_FETCHCONTENT_CMAKE_TOOLCHAIN_FILE@" STREQUAL "")
  include("@HERMETIC_FETCHCONTENT_CMAKE_TOOLCHAIN_FILE@")
endif()

# Hermetic FetchContent Package declarations for the dependencies
@HERMETIC_FETCHCONTENT_PROJECT_DEPENDENCIES_CONTENTS@


# additional build args
@HERMETIC_FETCHCONTENT_TOOLCHAIN_EXTENSION@

set(deferred_call_id "")
set(deferred_call_executed OFF)
set(HFC_SUMMARY_FILE_destination "@HFC_SUMMARY_FILE@")
set(HFC_SUMMARY_FILE_contentName "@HFC_SUMMARY_CONTENT_NAME@")
set(HFC_SUMMARY_FILE_dependency_source_dir "@HFC_DEPENDENCY_SOURCE_DIR@")

# serialize consumed hfc contents to HFC_SUMMARY_FILE
function(serialize_consumed_content)

  # don't do anything if there's no consumed contents.
  if(NOT HERMETIC_FETCHCONTENT_TARGETS_CACHE_CONSUMED_CONTENTS)
    return()
  endif()

  if((NOT deferred_call_executed) AND ("${HFC_SUMMARY_FILE_dependency_source_dir}" STREQUAL "${CMAKE_CURRENT_LIST_DIR}"))
    # prevent this being executed multiple times
    set(deferred_call_executed ON)
    cmake_language(DEFER CANCEL_CALL ${deferred_call_id}) 

    #
    # generate the summary file
    set(summary_content "# file generated by Hermetic FetchContent\n")
    
    foreach(content_name IN LISTS HERMETIC_FETCHCONTENT_TARGETS_CACHE_CONSUMED_CONTENTS)
      Hermetic_FetchContent_CMakeTargetsDiscover_escape_content_name(${content_name} safe_content_name)

      string(APPEND summary_content "# ${content_name}\n")
      string(APPEND summary_content "set(HERMETIC_FETCHCONTENT_SUMMARY_${safe_content_name}_TARGETS_INSTALL_PREFIX \"${HERMETIC_FETCHCONTENT_${content_name}_INSTALL_PREFIX}\")\n")
      string(APPEND summary_content "set(HERMETIC_FETCHCONTENT_SUMMARY_${safe_content_name}_TARGETS_CACHE_FILE \"${HERMETIC_FETCHCONTENT_${content_name}_TARGETS_CACHE_FILE}\")\n")
      string(APPEND summary_content "\n")

    endforeach()

    string(APPEND summary_content "set(HERMETIC_FETCHCONTENT_SUMMARY_consumed_contents \"${HERMETIC_FETCHCONTENT_TARGETS_CACHE_CONSUMED_CONTENTS}\")\n")
    string(APPEND summary_content "\n")

    string(APPEND summary_content "# end of generated file\n")

    file(WRITE "${HFC_SUMMARY_FILE_destination}" "${summary_content}")
    hfc_log(STATUS "Wrote hermetic fetchcontent summary file for ${HFC_SUMMARY_FILE_contentName} to ${HFC_SUMMARY_FILE_destination}")    
  endif() 

endfunction()

#
# Don't register this if the toolchain file is executed in TryCompile or the like
if(NOT CMAKE_PROJECT_NAME STREQUAL "CMAKE_TRY_COMPILE" AND "${HFC_SUMMARY_FILE_dependency_source_dir}" STREQUAL "${PROJECT_SOURCE_DIR}")
  cmake_language(DEFER ID_VAR deferred_call_id CALL serialize_consumed_content)  
endif()

# end of file